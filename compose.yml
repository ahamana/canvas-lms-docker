x-canvas: &canvas
  restart: unless-stopped
  environment:
    CANVAS_LMS_DOMAIN: ${CANVAS_LMS_DOMAIN}
    CANVAS_LMS_ADMIN_EMAIL: ${CANVAS_LMS_ADMIN_EMAIL}
    CANVAS_LMS_ADMIN_PASSWORD: ${CANVAS_LMS_ADMIN_PASSWORD}
    CANVAS_LMS_ACCOUNT_NAME: ${CANVAS_LMS_ACCOUNT_NAME}
    CANVAS_LMS_STATS_COLLECTION: ${CANVAS_LMS_STATS_COLLECTION}
    CANVAS_LMS_STORAGE_TYPE: ${CANVAS_LMS_STORAGE_TYPE}
    CANVAS_LMS_ENCRYPTION_KEY: ${CANVAS_LMS_ENCRYPTION_KEY}
    DB_HOST: db
    DB_PORT: 5432
    DB_USER: ${POSTGRES_USER}
    DB_PASSWORD: ${POSTGRES_PASSWORD}
    DB_NAME: ${POSTGRES_DB}
    DB_DRIVER: postgresql
    REDIS_HOST: redis
    EMAIL_DOMAIN: ${EMAIL_DOMAIN}
    EMAIL_HOST: smtp
    EMAIL_PORT: 1025
    EMAIL_HOST_USER: ${EMAIL_HOST_USER}
    EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    EMAIL_SENDER_ADDRESS: ${EMAIL_SENDER_ADDRESS}
    EMAIL_SENDER_NAME: ${EMAIL_SENDER_NAME}
    AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${AWS_REGION}
    AWS_ENDPOINT: ${AWS_ENDPOINT}
    TZ: ${TZ}
  volumes:
    - type: bind
      source: canvas/config/amazon_s3.yml
      target: /opt/canvas/config/amazon_s3.yml
      read_only: true
    - type: bind
      source: canvas/config/cache_store.yml
      target: /opt/canvas/config/cache_store.yml
      read_only: true
    - type: bind
      source: canvas/config/database.yml
      target: /opt/canvas/config/database.yml
      read_only: true
    - type: bind
      source: canvas/config/delayed_jobs.yml
      target: /opt/canvas/config/delayed_jobs.yml
      read_only: true
    - type: bind
      source: canvas/config/domain.yml
      target: /opt/canvas/config/domain.yml
      read_only: true
    - type: bind
      source: canvas/config/file_store.yml
      target: /opt/canvas/config/file_store.yml
      read_only: true
    - type: bind
      source: canvas/config/logging.yml
      target: /opt/canvas/config/logging.yml
      read_only: true
    - type: bind
      source: canvas/config/outgoing_mail.yml
      target: /opt/canvas/config/outgoing_mail.yml
      read_only: true
    - type: bind
      source: canvas/config/redis.yml
      target: /opt/canvas/config/redis.yml
      read_only: true
    - type: bind
      source: canvas/config/security.yml
      target: /opt/canvas/config/security.yml
      read_only: true
    - type: bind
      source: canvas/config/environments/production-local.rb
      target: /opt/canvas/config/environments/production-local.rb
      read_only: true
    - type: volume
      source: canvas-files
      target: /opt/canvas/tmp/files
    - type: volume
      source: canvas-log
      target: /opt/canvas/log
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
    smtp:
      condition: service_started
  #   minio:
  #     condition: service_healthy
  # extra_hosts:
  #   localhost: host-gateway

services:
  web:
    <<: *canvas
    container_name: canvas-web
    ports:
      - published: 80
        target: 3000

  job:
    <<: *canvas
    container_name: canvas-job
    command: script/delayed_job run

  db:
    container_name: postgres
    image: postgres:17
    restart: unless-stopped
    ports:
      - published: 5432
        target: 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:8
    restart: unless-stopped
    command: redis-server --appendonly yes
    environment:
      TZ: ${TZ}
    healthcheck:
      test: redis-cli ping
    volumes:
      - type: volume
        source: redis-data
        target: /data

  smtp:
    container_name: mailpit
    image: axllent/mailpit
    restart: unless-stopped
    ports:
      - published: 8025
        target: 8025
    environment:
      MP_SMTP_AUTH: ${EMAIL_HOST_USER}:${EMAIL_HOST_PASSWORD}
      MP_SMTP_AUTH_ALLOW_INSECURE: true

  # minio:
  #   container_name: minio
  #   image: minio/minio
  #   restart: unless-stopped
  #   command: server /data --console-address :9001
  #   ports:
  #     - published: 9000
  #       target: 9000
  #     - published: 9001
  #       target: 9001
  #   environment:
  #     MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
  #     MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
  #   healthcheck:
  #     test: mc ready local
  #   volumes:
  #     - type: volume
  #       source: minio-data
  #       target: /data

volumes:
  canvas-files:
  canvas-log:
  db-data:
  redis-data:
  # minio-data:
