# syntax=docker/dockerfile

ARG NODE_VERSION=22
ARG RUBY_VERSION=3.3
ARG CANVAS_HOME=/opt/canvas

FROM node:${NODE_VERSION}-alpine AS node

FROM ruby:${RUBY_VERSION}-alpine AS builder

ARG YARN_VERSION=1.22.22
ARG CANVAS_HOME

ENV NODE_OPTIONS=--openssl-legacy-provider

COPY --from=node /usr/local/bin/node /usr/local/bin
COPY --from=node /usr/local/lib/node_modules /usr/local/lib/node_modules

RUN <<EOF
ln -s /usr/local/bin/node /usr/local/bin/nodejs
ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm
ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

apk add --no-cache \
    alpine-sdk \
    bash \
    libidn-dev \
    libpq-dev \
    shared-mime-info \
    sqlite-dev \
    tzdata
# Building "nokogiri-xmlsec-instructor" fails bacause the error "'XMLSEC_CRYPTO' undeclared" occurs.
# So, the package needs to be installed by specifying the version that can refer to "XMLSEC_CRYPTO".
# https://github.com/instructure/nokogiri-xmlsec-instructure/issues/18
# https://trac.macports.org/ticket/67233?cversion=0&cnum_hist=5
apk add --no-cache --repository https://dl-cdn.alpinelinux.org/alpine/v3.17/community/ \
    xmlsec-dev~=1.2

npm update -g npm
npm install -g yarn@${YARN_VERSION}

git clone -b prod --depth 1 https://github.com/instructure/canvas-lms.git ${CANVAS_HOME}
EOF

WORKDIR ${CANVAS_HOME}

RUN <<EOF
yarn config set network-timeout 600000
yarn config set network-concurrency 1
yarn install --pure-lockfile --ignore-optional
# https://github.com/instructure/canvas-lms/issues/2311
yarn add @instructure/outcomes-ui -W

# https://github.com/sparklemotion/sqlite3-ruby/issues/434
bundle config set force_ruby_platform true
bundle install
bundle exec rake canvas:compile_assets_dev

rm -rf \
    .git \
    .github \
    .storybook \
    .vscode \
    build \
    doc \
    docker-compose \
    hooks \
    inst-cli \
    jest \
    log/* \
    node_modules \
    patches \
    tmp/* \
    ui \
    ui-build
rm \
    .codeclimate.yml \
    .dependency-cruiser.js \
    .devcontainer.json \
    .dive-ci \
    .dockerignore \
    .editorconfig \
    .eslintignore \
    .eslintrc.js \
    .git-blame-ignore-revs \
    .gitignore \
    .gitmessage \
    .groovylintrc.json \
    .i18nignore \
    .i18nrc \
    .irbrc \
    .lintstagedrc.js \
    .npmrc \
    .nvmrc \
    .prettierrc \
    .rspec \
    .rubocop.yml \
    .sentryignore \
    .stylelintrc \
    CONTRIBUTING.md \
    COPYRIGHT \
    Dockerfile* \
    Jenkinsfile* \
    LICENSE \
    README.md \
    SECURITY.md \
    code_of_conduct.md \
    config/*.yml.* \
    docker-compose* \
    gulpfile.js \
    issue_template.md \
    jest.config.js \
    karma.conf.js \
    package.json \
    renovate.json \
    rspack.config.js \
    tsconfig.json \
    vitest.*.ts \
    yarn.lock
EOF

COPY canvas ${CANVAS_HOME}

FROM ruby:${RUBY_VERSION}-alpine AS runner

ARG CANVAS_HOME
ARG CANVAS_USER=canvas

RUN <<EOF
apk add --no-cache \
    brotli-libs \
    git \
    libidn \
    libpq \
    shared-mime-info \
    sqlite-libs \
    tzdata \
    xmlsec

addgroup ${CANVAS_USER}
adduser -D -G ${CANVAS_USER} -h ${CANVAS_HOME} ${CANVAS_USER}
EOF

COPY --from=builder --chown=${CANVAS_USER} ${GEM_HOME} ${GEM_HOME}
COPY --from=builder --chown=${CANVAS_USER} ${CANVAS_HOME} ${CANVAS_HOME}

WORKDIR ${CANVAS_HOME}

USER ${CANVAS_USER}

ENV RUBYLIB=${CANVAS_HOME}

EXPOSE 3000

CMD [ "bundle", "exec", "rails", "server", "-b", "0.0.0.0" ]
